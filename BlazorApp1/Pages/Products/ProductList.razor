@page "/products"
@inject BlazorApp1.Data.NorthwindContext _context
@using BlazorApp1.Data
@using Microsoft.EntityFrameworkCore

<h3>Ürün Listesi</h3>


<input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Ürün adı ara..." class="form-control mb-3" />



@if (products == null)
{
    <p>Yükleniyor...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Ad</th>
                <th>Fiyat</th>
                <th>Stok</th>
                <th>Kategori</th>
                <th>İşlem</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in products)
            {
                <tr>
                    <td>@item.ProductName</td>
                    <td>@item.UnitPrice</td>
                    <td>@item.UnitsInStock</td>
                    <td>@item.Category?.CategoryName</td>
                    <td>
                        <a class="btn btn-sm btn-warning me-1" href="/editproduct/@item.ProductID">Düzenle</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(item.ProductID)">Sil</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Product> products = new();
    List<Product> allProducts = new();

    string _searchTerm = "";
    string searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            SearchProducts();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        allProducts = await _context.Products.Include(p => p.Category).ToListAsync();
        products = new List<Product>(allProducts);
    }

    private async Task DeleteProduct(int id)
    {
        var product = await _context.Products.FindAsync(id);
        if (product != null)
        {
            _context.Products.Remove(product);
            await _context.SaveChangesAsync();
        }

        allProducts = await _context.Products.Include(p => p.Category).ToListAsync();
        SearchProducts();
    }

    private void SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            products = new List<Product>(allProducts);
        }
        else
        {
            products = allProducts
                .Where(p => p.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
}

