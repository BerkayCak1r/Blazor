@page "/products"
@inject BlazorApp1.Services.ProductService ProductService

@using BlazorApp1.Data
@using BlazorApp1.Components

<h3>Ürün Listesi</h3>

@if (isLoading)
{
    <p>Yükleniyor...</p>
}
else if (loadError != null)
{
    <p class="text-danger">Hata: @loadError</p>
}
else if (products == null || !products.Any())
{
    <p>Ürün bulunamadı.</p>
}
else
{
    <SearchBar SearchTerm="@searchTerm" SearchTermChanged="@OnSearchChanged" />
    <ProductTable Products="products" OnDelete="DeleteProduct" />
}

@code {
    List<Product> products = new();
    List<Product> allProducts = new();
    string searchTerm = "";

    bool isLoading = true;
    string? loadError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allProducts = await ProductService.GetProductsAsync();
            products = new List<Product>(allProducts);
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProductAsync(id);
        allProducts = await ProductService.GetProductsAsync();
        FilterProducts();
    }

    private void OnSearchChanged(string term)
    {
        searchTerm = term;
        FilterProducts();
    }

    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            products = new List<Product>(allProducts);
        }
        else
        {
            products = allProducts
                .Where(p => p.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
}
